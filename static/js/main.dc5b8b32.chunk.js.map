{"version":3,"sources":["ApiDetails.js","components/ButtonStyles.js","components/GoogleSignIn/GoogleLoginButton.js","components/GoogleSignIn/GoogleProfile.js","components/GoogleSignIn/GoogleButton.js","components/FacebookSignIn/FacebookProfile.js","components/FacebookSignIn/FacebookLoginButton.js","components/FacebookSignIn/FacebookButton.js","components/GithubSignIn/GithubLoginButton.js","components/GithubSignIn/GithubProfile.js","components/GithubSignIn/GithubButton.js","components/LinkedInSignIn/LinkedInProfile.js","components/LinkedInSignIn/LinkedInLoginButton.js","components/LinkedInSignIn/LinkedInLogin.js","components/LinkedInSignIn/LinkedInButton.js","containers/App.js","serviceWorker.js","index.js"],"names":["REDIRECT_URI","CORS_URL","ButtonStyles","width","margin","marginTop","marginBottom","GoogleLoginButton","handleSuccess","handleFailure","clientId","onSuccess","onFailure","render","renderProps","onClick","style","GoogleProfile","user","handleLogout","console","log","name","alt","src","imageUrl","GoogleButton","isUserSignedIn","changeSignInStatus","useState","isSignedIn","setIsSignedIn","setUser","textAlign","response","profileObj","FacebookProfile","picture","data","url","FacebookLoginButton","appId","fields","callback","FacebookButton","window","location","href","match","GithubLoginButton","handleLogin","textDecoration","GithubProfile","avatar_url","GithubButton","handleLoginSuccess","code","a","fetch","method","generate_access_token","text","access_token","split","generate_user","JSON","parse","id","className","align","LinkedInProfile","onLogoutClick","localizedFirstName","localizedLastName","profilePicture","elements","identifiers","identifier","LinkedInLoginButton","scope","redirectUri","renderElement","LinkedInLogin","changeSignInState","get_access_token","json","get_user","error","LinkedInButton","resp","App","setIsUserSignedIn","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc5b8b32.chunk.js","sourcesContent":["//export const GOOGLE_CLIENT_ID = '658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com';\r\nexport const GOOGLE_CLIENT_ID = '278205736150-prnf2ugv71kt5n7tnied504u767dlmj3.apps.googleusercontent.com';\r\n\r\nexport const FACEBOOK_CLIENT_ID = '555351001882800';\r\n\r\nexport const GITHUB_CLIENT_ID = '6bac23ed722557bf5e99';\r\nexport const GITHUB_CLIENT_SECRET = 'c48a8c89c103f96499cd5217f5fc81a2953762ea';\r\n\r\nexport const LINKEDIN_CLIENT_ID = '86ogqcavau6buk';\r\nexport const LINKEDIN_CLIENT_SECRET = 'Hk7WnOhlnROLakU5';\r\n\r\nexport const REDIRECT_URI = 'https://pkcprashant.github.io/IN-CUBE-Login-Authentication-Page';\r\n\r\nexport const CORS_URL = 'https://cors-anywhere.herokuapp.com/';\r\n\r\n","export const ButtonStyles = {\r\n    width: 'auto',\r\n    margin: 'auto',\r\n    marginTop: '20px',\r\n    marginBottom: '20px'\r\n  }","import React from 'react';\r\n\r\nimport GoogleLogin from 'react-google-login';\r\nimport { GoogleLoginButton as Google } from \"react-social-login-buttons\";\r\n\r\nimport { GOOGLE_CLIENT_ID } from '../../ApiDetails';\r\nimport { ButtonStyles } from '../ButtonStyles';\r\n\r\nconst GoogleLoginButton = ({handleSuccess, handleFailure}) => {\r\n    return (\r\n        <GoogleLogin\r\n            clientId={GOOGLE_CLIENT_ID}\r\n            onSuccess={handleSuccess}\r\n            onFailure={handleFailure}\r\n            render={renderProps => (\r\n                <Google onClick={renderProps.onClick} style={ButtonStyles}>SIGNUP WITH GOOGLE</Google>\r\n                )}\r\n        />\r\n    );\r\n}\r\n\r\nexport default GoogleLoginButton;","import React from 'react';\r\n\r\nimport { GoogleLogout } from 'react-google-login';\r\nimport { GoogleLoginButton as Google } from \"react-social-login-buttons\";\r\nimport { ButtonStyles } from '../ButtonStyles';\r\n\r\nimport { GOOGLE_CLIENT_ID } from '../../ApiDetails';\r\n\r\nconst GoogleProfile = ({user, handleLogout}) => {\r\n    console.log(user);\r\n    return (\r\n        <span>\r\n            <h1>Welcome {user.name}</h1>\r\n            <img alt='Profile' src={user.imageUrl} />\r\n            <Google onClick={handleLogout} style={ButtonStyles}>SIGNOUT</Google>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default GoogleProfile;","import React, { useState } from 'react';\r\n\r\nimport GoogleLoginButton from './GoogleLoginButton';\r\nimport GoogleProfile from './GoogleProfile';\r\n\r\nconst GoogleButton = ({isUserSignedIn, changeSignInStatus}) => {\r\n\r\n    const [ isSignedIn, setIsSignedIn ] = useState(false);\r\n    const [ user, setUser ] = useState('');\r\n\r\n    const handleSuccess = (response) => {\r\n        setIsSignedIn(true);\r\n        changeSignInStatus(() => 'google');\r\n        setUser(response.profileObj);\r\n    }\r\n\r\n    const handleFailure = (response) => {\r\n        setIsSignedIn(false);\r\n        changeSignInStatus(() => 'none');\r\n        setUser('');\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        setIsSignedIn(false);\r\n        changeSignInStatus(() => 'none');\r\n        setUser('');\r\n    }\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            {(isUserSignedIn==='none' || isUserSignedIn === 'google') && (isSignedIn ? (\r\n                <GoogleProfile user={user} handleLogout={handleLogout} />\r\n            ) : (\r\n                <GoogleLoginButton handleSuccess={handleSuccess} handleFailure={handleFailure} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GoogleButton;","import React from 'react';\r\nimport { FacebookLoginButton as Facebook } from \"react-social-login-buttons\";\r\nimport { ButtonStyles } from '../ButtonStyles';\r\n\r\nconst FacebookProfile = ({user, handleLogout}) => {\r\n    console.log(user);\r\n    return (\r\n        <span>\r\n            <h1>Welcome {user.name}</h1>\r\n            {user && <img alt='Profile' src={user.picture.data.url} />}\r\n            <Facebook onClick={handleLogout} style={ButtonStyles}>SIGNOUT</Facebook>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default FacebookProfile;","import React from 'react';\r\n\r\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props';\r\nimport { FacebookLoginButton as Facebook } from \"react-social-login-buttons\";\r\n\r\nimport { FACEBOOK_CLIENT_ID } from '../../ApiDetails';\r\nimport { ButtonStyles } from '../ButtonStyles';\r\n\r\nconst FacebookLoginButton = ({handleSuccess, handleFailure}) => {\r\n    return (\r\n        <FacebookLogin\r\n            appId={FACEBOOK_CLIENT_ID}\r\n            fields=\"name,email,picture\"\r\n            callback={handleSuccess} \r\n            onFailure={handleFailure}\r\n            render={renderProps => (\r\n                <Facebook onClick={renderProps.onClick} style={ButtonStyles}>SIGNUP WITH FACEBOOK</Facebook>\r\n                )}\r\n        />\r\n    );\r\n}\r\n\r\nexport default FacebookLoginButton;","import React, { useState } from 'react';\r\n\r\nimport FacebookProfile from './FacebookProfile';\r\nimport FacebookLoginButton from './FacebookLoginButton';\r\n\r\nconst FacebookButton = ({isUserSignedIn, changeSignInStatus}) => {\r\n\r\n    const [ isSignedIn, setIsSignedIn ] = useState(false);\r\n    const [ user, setUser ] = useState('');\r\n\r\n    const handleSuccess = (response) => {\r\n        setIsSignedIn(true);\r\n        changeSignInStatus(() => 'facebook');\r\n        setUser(response);\r\n    }\r\n\r\n    const handleFailure = (response) => {\r\n        setIsSignedIn(false);\r\n        changeSignInStatus(() => 'none');\r\n        setUser('');\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        setIsSignedIn(false);\r\n        changeSignInStatus(() => 'none');\r\n        setUser('');\r\n    }\r\n\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            {(!window.location.href.match('/?code=(.*)')) && (isUserSignedIn ==='none' || isUserSignedIn === 'facebook') && (isSignedIn ? (\r\n                <FacebookProfile user={user} handleLogout={handleLogout} />\r\n            ) : (\r\n                <FacebookLoginButton handleSuccess={handleSuccess} handleFailure={handleFailure} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FacebookButton;","import React from 'react';\r\n\r\nimport { GithubLoginButton as Github } from \"react-social-login-buttons\";\r\n\r\nimport { GITHUB_CLIENT_ID, REDIRECT_URI } from '../../ApiDetails';\r\nimport { ButtonStyles } from '../ButtonStyles';\r\n\r\nconst GithubLoginButton = ({handleLogin}) => {\r\n\r\n    return (\r\n        <a href={`https://github.com/login/oauth/authorize?client_id=${GITHUB_CLIENT_ID}&scope=user&redirect_uri=${REDIRECT_URI}`}\r\n            onClick={handleLogin()}\r\n            style={{textDecoration: 'none'}}\r\n        >\r\n        <Github style={ButtonStyles}>SIGNUP WITH GITHUB</Github>\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default GithubLoginButton;","import React from 'react';\r\nimport { GithubLoginButton as Github } from \"react-social-login-buttons\";\r\nimport { ButtonStyles } from '../ButtonStyles';\r\n\r\nconst GithubProfile = ({user, handleLogout}) => {\r\n    console.log(user);\r\n    return (\r\n        <span>\r\n            <h1>Welcome {user.name}</h1>\r\n            <img alt='Profile' src={user.avatar_url} />\r\n            <Github onClick={handleLogout} style={ButtonStyles}>SIGNOUT</Github>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default GithubProfile;","import React, { useState } from 'react';\r\n\r\nimport { GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET, CORS_URL, REDIRECT_URI } from '../../ApiDetails';\r\nimport GithubLoginButton from './GithubLoginButton';\r\nimport GithubProfile from './GithubProfile';\r\n\r\nconst GithubButton = ({isUserSignedIn, changeSignInStatus}) => {\r\n\r\n  const [ isSignedIn, setIsSignedIn ] = useState(false);\r\n  const [ user, setUser ] = useState('');\r\n\r\n  const handleLoginSuccess = async(code) => {\r\n    console.log('Code ',code);   \r\n    const generate_access_token = await fetch(`${CORS_URL}https://github.com/login/oauth/access_token?client_id=${GITHUB_CLIENT_ID}&redirect_uri=${REDIRECT_URI}&client_secret=${GITHUB_CLIENT_SECRET}&code=${code}`, {\r\n                                                method: 'POST',\r\n                                              });\r\n    const access_token = (await generate_access_token.text()).split('&')[0].split('=')[1];\r\n    console.log('Access Token ',access_token);\r\n\r\n    if(access_token && access_token !== 'bad_verification_code'){\r\n      const generate_user = await fetch(`${CORS_URL}https://api.github.com/user?access_token=${access_token}`);\r\n      const user = JSON.parse(await generate_user.text());\r\n      console.log('USER ',user);\r\n      if(user.id){\r\n        setUser(user);\r\n        setIsSignedIn(true);\r\n        changeSignInStatus(() => 'github');\r\n      }\r\n    }\r\n  } \r\n\r\n  const handleLogin = () => {\r\n    if(window.location.href.match('/?code=(.*)'))\r\n      handleLoginSuccess(window.location.href.match('/?code=(.*)')[1]);\r\n    else\r\n      console.log('CODE COULD NOT BE GENERATED');\r\n  }\r\n\r\n  const handleLogout = () => {\r\n    setUser('');\r\n    setIsSignedIn(false);\r\n    changeSignInStatus(() => 'none');\r\n    window.location.href = REDIRECT_URI;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" align=\"center\">  \r\n      {(isUserSignedIn === 'none' || isUserSignedIn === 'github') && (isSignedIn ? (\r\n          <GithubProfile user={user} handleLogout={handleLogout}/>\r\n      ) : (\r\n          <GithubLoginButton handleLogin={handleLogin} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GithubButton;","import React from 'react';\r\n\r\nimport { LinkedInLoginButton as LinkedIn } from \"react-social-login-buttons\";\r\nimport { ButtonStyles } from '../ButtonStyles';\r\n\r\nconst LinkedInProfile = ({user, onLogoutClick}) => {\r\n    console.log(user);\r\n    return (\r\n        <span>\r\n            <h1>Welcome {user.localizedFirstName+\" \"+user.localizedLastName}</h1>\r\n            {user && <img alt='Profile' src={user.profilePicture[\"displayImage~\"].elements[2].identifiers[0].identifier} />}\r\n            <LinkedIn onClick={onLogoutClick} style={ButtonStyles}>SIGNOUT</LinkedIn>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default LinkedInProfile;","import React from 'react';\r\n\r\nimport { LinkedIn } from 'react-linkedin-login-oauth2';\r\nimport { LinkedInLoginButton as MyLinkedIn } from \"react-social-login-buttons\";\r\n\r\nimport { LINKEDIN_CLIENT_ID, REDIRECT_URI } from '../../ApiDetails';\r\nimport { ButtonStyles } from '../ButtonStyles';\r\n\r\nconst LinkedInLoginButton = ({handleSuccess, handleFailure}) => {\r\n\r\n    return (\r\n        <LinkedIn\r\n            clientId={LINKEDIN_CLIENT_ID}\r\n            scope='r_liteprofile'\r\n            onFailure={handleFailure}\r\n            onSuccess={handleSuccess}\r\n            redirectUri={REDIRECT_URI+'/linkedin'}\r\n            renderElement={renderProps => (\r\n                <MyLinkedIn onClick={renderProps.onClick} style={ButtonStyles}>SIGNUP WITH LINKEDIN</MyLinkedIn>\r\n                )}\r\n        />\r\n    );\r\n}\r\n\r\nexport default LinkedInLoginButton;","import React, { useState } from 'react';\r\n \r\nimport { LINKEDIN_CLIENT_ID, LINKEDIN_CLIENT_SECRET, CORS_URL, REDIRECT_URI } from '../../ApiDetails';\r\nimport LinkedInProfile from './LinkedInProfile';\r\nimport LinkedinLoginButton from './LinkedInLoginButton';\r\n\r\nconst LinkedInLogin = ({isUserSignedIn, changeSignInState}) => {\r\n  const [ isSignedIn, setIsSignedIn ] = useState(false);\r\n  const [ user, setUser ] = useState('');\r\n\r\n  const handleSuccess = async(data) => {\r\n    const code = data.code;\r\n    if(code){\r\n      const get_access_token = await fetch(`${CORS_URL}https://www.linkedin.com/oauth/v2/accessToken?client_id=${LINKEDIN_CLIENT_ID}&client_secret=${LINKEDIN_CLIENT_SECRET}&grant_type=authorization_code&redirect_uri=${REDIRECT_URI}/linkedin&code=${code}`);\r\n      const access_token = (await get_access_token.json()).access_token;\r\n      console.log(access_token)\r\n      if(access_token && access_token!=='Invalid access token'){\r\n        const get_user = await fetch(`${CORS_URL}https://api.linkedin.com/v2/me?projection=(id,localizedLastName,localizedFirstName,profilePicture(displayImage~:playableStreams))&oauth2_access_token=${access_token}`);\r\n        const user = await get_user.json();\r\n        console.log(user);\r\n        setIsSignedIn(true);\r\n        setUser(user);\r\n        changeSignInState('linkedin');\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleFailure = (error) => {\r\n    console.log('ERROR WAS CAUSED ', error);\r\n  }\r\n\r\n  const handleLogout = () => {\r\n    setIsSignedIn(false);\r\n    setUser('');\r\n    changeSignInState('none')\r\n  }\r\n\r\n  return (\r\n    <div style={{textAlign: 'center'}}>\r\n            {(isUserSignedIn ==='none' || isUserSignedIn === 'linkedin') && (isSignedIn ? (\r\n                <LinkedInProfile user={user} onLogoutClick={handleLogout}/>\r\n            ) : (\r\n                <LinkedinLoginButton handleSuccess={handleSuccess} handleFailure={handleFailure} />\r\n            ))}\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default LinkedInLogin;","import React from 'react';\r\n\r\nimport { LinkedInPopUp } from 'react-linkedin-login-oauth2';\r\n\r\nimport LinkedInLogin from './LinkedInLogin';\r\n\r\nconst LinkedInButton = ({isUserSignedIn, changeSignInStatus}) => {\r\n\r\n  const setIsUserSignedInState = (resp) => {\r\n    changeSignInStatus(() => resp);\r\n  }\r\n\r\n  if(window.location.href.match('/linkedin')){\r\n    return <LinkedInPopUp />\r\n  }else{\r\n    return <LinkedInLogin isUserSignedIn={isUserSignedIn} changeSignInState={setIsUserSignedInState} />\r\n  }\r\n\r\n}\r\n\r\nexport default LinkedInButton;","import React, { useState } from 'react';\r\n\r\nimport GoogleButton from '../components/GoogleSignIn/GoogleButton';\r\nimport FacebookButton from '../components/FacebookSignIn/FacebookButton';\r\nimport GithubButton from '../components/GithubSignIn/GithubButton';\r\nimport LinkedInButton from '../components/LinkedInSignIn/LinkedInButton';\r\n\r\nconst App = () => {\r\n\r\n  const [ isUserSignedIn, setIsUserSignedIn ] = useState('none');\r\n\r\n  return (\r\n    <div>\r\n      <GoogleButton isUserSignedIn={isUserSignedIn} changeSignInStatus={setIsUserSignedIn} />\r\n      <FacebookButton isUserSignedIn={isUserSignedIn} changeSignInStatus={setIsUserSignedIn} />\r\n      <GithubButton isUserSignedIn={isUserSignedIn} changeSignInStatus={setIsUserSignedIn} />\r\n      <LinkedInButton isUserSignedIn={isUserSignedIn} changeSignInStatus={setIsUserSignedIn} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}